= API =

We need to design an API model that is RESTful to keep it simple, must be easy to implement by other 3rd party clients.

 = Draft API =
 == Items and feed ==

 * GET item/user_feed
 * GET item/company_feed
 * GET item/:id
 * POST item/
 * POST item/:id/update ^Later^ -- allow to change ACL of an item
 * POST item/:id/delete -- delete or remove a comment/item from a user's feed.
  :id could be a comment Id or item Id
 * POST item/:id/comment -- post a comment for the specified item.
  :id has to be an item id not comment id
 * POST item/:id/like
 * POST item/:id/reshare ^Later^ -- allow to reshare an item if plugin allows
 * POST item/:id/action -- plugin specific actions on this item.
  Every plugin will define its own set of endpoints based on whay inputs it supports.
  * For a Poll type plugin
   * POST item/:id/action/vote?option=2
   * GET item/:id/action/results
  * For an event
   * POST item/:id/action/event?attend=maybe
   * GET item/:id/action/event/attendees
   * POST item/:id/action/event/attendees?attendee=[:id]&action=remove

 ==== Requests and Response ====
  * '''GET item/user_feed|company_feed|:id'''
  * Request Params
   * id -- optional id of the user whose feed is to sent. default is authenticated user
   * count -- optional. Specifies the number of records to retrieve. Must be less than or equal to 10.
   * since_id -- optional. Returns results with an ID greater than (that is, more recent than) the specified ID.
   * max_id -- optional. Returns results with an ID less than (that is, older than) or equal to the specified ID.
   * page -- optional. Specifies the page of results to retrieve.

  * Response Params
   * created_at -- time of creation
   * comments -- list of comments under this item
    * author
     * id -- id of the author
     * display_name
     * display_avatar
    * comment -- text of the comment
    * id -- id of the comment
   * tags -- list of tags
    * tag
   * likes -- count of likes
   * text -- The actual text
   * id -- the id of the status
   * author -- The owner of this item
    * id
    * display_name
    * display_avatar
   * type -- The plugin type of this item e.g status, poll, event, question etc
   * type_content -- the JSON rendered output of the plugin item

  * '''POST item/'''
  * Request Params
    * text -- Required.
    * acl -- Required.
    * type -- Optional. Default is 'status'. The plugin type under which this item will be created
    * type_options -- Optional if status else plugin specific options.
     type specific arguments to passed on(will be passed on to the plugin handler)

  * Response Params
    * Return response of the single item like above

  * '''POST item/:id/comment'''
  * Request Params
    * comment -- Required. Text of the comment

  * Response Params
    * Return response of the single item like above

  * '''POST item/:id/delete'''
  * Request Params
    * None

  * Response Params
    * Return 200 OK

  * '''POST item/:id/action'''
  * Request Params
    * TODO

  * Response Params
    * Return response of the single item like above


 == Private Messaging ==

 * GET message/inbox
 * GET message/archives
 * GET message/trash
 * GET message/:id
 * POST message/
 * POST message/:id/update -- Post a reply or add/remove a participant
 * POST message/:id/delete

 ==== Requests and Response ====
 == Groups ==
 * GET groups/all -- List of all groups in the org
 * GET groups/memberships -- List of groups that the user is a member of
 * GET groups/:id/feed
 * GET groups/following -- List of groups that the user is following
 * GET groups/:id/members -- List of members of a group that this user is a member of
 * POST groups/ -- Create a group
 * POST groups/:id/join -- Join a group
 * POST groups/:id/follow -- start following a group
 * POST groups/:id/members/update -- Add/remove/block/approve, promote as moderator etc
 * POST groups/:id/update -- update properties of a group
 * POST groups/:id/delete -- delete a group that this user is an admin of

 ==== Requests and Response ====
 == ^TODO^People and followers ==
 == ^TODO^Search ==

